#include <Servo.h>

// tested on tinkercad project https://www.tinkercad.com/things/lhSup2d9LTP-team-practice-added-rain-switch-for-interrupt/editel?sharecode=HC4jMCGC806FxrvNh9dOAAfg8FNphMdCA7xDGM8vKVs

//interrupts: arduino.cc/reference/en/language/functions/external-interrupts/attachinterrupt/
// comparator interrupt https://forum.arduino.cc/index.php?topic=149840.0, https://www.youtube.com/watch?v=QdJrJXQaiy8, http://www.gammon.com.au/forum/?id=11916, 
const int tempInPin = A2;
const int tempOutPin = A0;
// highest temp corresponds to 358, lowest temp corresponds to 20

const int greenLedPin = 7;
const int redLedPin = 8;

//https://vetco.net/products/rain-sensor-for-arduino?gclid=Cj0KCQjww_f2BRC-ARIsAP3zarGmMg3D0nxuw0fdA1LHU2nxvRJa2JZ81LpUyxbbfHLFhP5XPMcqfJ0aAt3hEALw_wcB
// rain sensor can either return an analog value or digital signal

//the only interrupt pins on the uno are UNO pins 2 and 3 - https://arduino.stackexchange.com/questions/1784/how-many-interrupt-pins-can-an-uno-handle#:~:text=There%20are%20only%20two%20external,edges%2C%20or%20on%20low%20level.
// followed this tutorial to set up slide switch https://www.instructables.com/id/Slide-Switch-With-Arduino-Uno-R3/
const int rainSwitchPin = 2;

const int rainPin = A1;

const int windowPosPin = 10;
const int windowBlindsPin = 9;

const int lightPin = A3;

const int lockPin = 12;

const int tolerance = 10; //TODO Oliver figure out the int equilavent of 1deg Fahrenheit

const int WINDOW_CLOSED = 0;
const int WINDOW_OPEN = 180;
const int WINDOW_NIGHT = 0;

const int NIGHT_LIGHT_LEVEL = 400;

Servo windowPosServo;
Servo windowBlindsServo;

int lastSetWindowAngle;

//suggested to declare as volatile for use with interrupt
volatile bool isRaining = false;

void setup()
{
  pinMode(tempInPin, INPUT);
  pinMode(tempOutPin, INPUT);
  
  pinMode(greenLedPin, OUTPUT);
  pinMode(redLedPin, OUTPUT);
  
  pinMode(rainPin, INPUT);
  
  //pinMode(windowPosPin, OUTPUT);
  //pinMode(windowBlindsPin, OUTPUT);
  
  windowPosServo.attach(windowPosPin);
  windowBlindsServo.attach(windowBlindsPin);
  
  pinMode(lightPin, INPUT);
  
  pinMode(lockPin, OUTPUT);
  
  pinMode(rainSwitchPin, INPUT);
  
  attachInterrupt(digitalPinToInterrupt(rainSwitchPin), changeRainingStatus, CHANGE);
  
  
  Serial.begin(9600);
  
  //windowPosServo.write(0);
  //windowBlindsServo.write(180);
  
  setWindowAngle(WINDOW_CLOSED);  
}

void loop()
{
 //testAllComponents();
  int insideReading = readAnalog("inside: ", tempInPin);
  int outsideReading = readAnalog("outside: ", tempOutPin);
  int lightReading = readAnalog("light: ", lightPin);
  //TODO get other readings, change setWindowPosition to use them
  setWindowPosition(insideReading, outsideReading, lightReading);
  
}

//interrupt that toggles the isRaining variable
void changeRainingStatus(){
  isRaining = !isRaining;
}

void testAllComponents(){
  turnOnOffLed(redLedPin);
  turnOnOffLed(greenLedPin);
  turnOnOffLed(lockPin);
  readAnalog("temp in: ", tempInPin);
  readAnalog("temp out: ", tempOutPin);
  readAnalog("light: ", lightPin);
  readAnalog("rain: ", rainPin);
  
  //windowPosServo.write(0);
  //delay(100);
  //windowPosServo.write(90);
  //delay(100);
  //windowPosServo.write(180);
  //delay(100);
  
  //windowBlindsServo.write(0);
  //delay(100);
  //windowBlindsServo.write(90);
  //delay(100);
  //windowBlindsServo.write(180);
  //delay(100);
  
  //testServo(windowPosServo);
  //testServo(windowBlindsServo);
  
  int angle = 0;
  for(angle = 0; angle <= 180; angle+=1){
    windowPosServo.write(angle);
    delay(15);
    //Serial.println("set servo to " + String(angle));
  } 
    for(angle = 180; angle >= 0; angle-=1){
    windowPosServo.write(angle);
    delay(15);
    //Serial.println("set servo to " + String(angle));
  } 
  for(angle = 0; angle <= 180; angle+=1){
    windowBlindsServo.write(angle);
    delay(15);
    //Serial.println("set servo to " + String(angle));
  }
  for(angle = 180; angle >= 0; angle-=1){
    windowBlindsServo.write(angle);
    delay(15);
    //Serial.println("set servo to " + String(angle));
  }
  
}

void turnOnOffLed(int pin){
  digitalWrite(pin, HIGH);
  delay(100);
  digitalWrite(pin, LOW);
  delay(100);
}

int readAnalog(String desc, int pin){
  int reading = analogRead(pin);
  delay(100);
  Serial.println(desc + reading);
  delay(100); 
  return reading;
}
    
void setWindowPosition(int insideReading, int outsideReading, int lightReading){
  

  
  if(lightReading < NIGHT_LIGHT_LEVEL){
    // light level indicated night time, so set window to night time position and lock 
    setWindowAngle(WINDOW_NIGHT);
    if(WINDOW_NIGHT == WINDOW_CLOSED){
     lockWindow(); 
    }
  }
  
  //isRaining is determined by interrupt, close the window all the way if it is raining
  else if(isRaining){
    setWindowAngle(WINDOW_CLOSED);
  }  
  
  else if (insideReading > (outsideReading - tolerance)){
    //open window
    //(358-120)/180 = 1.82
    // 358/2 = 179
    // 20/2 = 10
    
    //TODO mess with this scaling
    int angle = (insideReading - outsideReading)/2;
      
    setWindowAngle(angle);
   
  }
   else if (outsideReading > (insideReading - tolerance)){
    //open window because it is more than tolerance hotter outside than inside
    
    int angle = WINDOW_CLOSED;
      
    setWindowAngle(angle);
   
  }
}

void setWindowAngle(int angle){
 
  if(angle >= WINDOW_CLOSED && angle <= WINDOW_OPEN && angle != lastSetWindowAngle)
  {
    unlockWindow();
    indicateError();
    windowPosServo.write(angle);
    delay(50);
    lastSetWindowAngle = angle;
    
    while(lastSetWindowAngle != angle)
    {    	
      	delay(10);
    }
    
    indicateSuccess();
  }
  else{
    Serial.println("Invalid Window Position");
    indicateError();
  }        
}

void indicateError(){
  //TODO Oliver Update when pins change
  digitalWrite(greenLedPin, LOW);
  delay(50);
  digitalWrite(redLedPin, HIGH);
  delay(50);
}

void indicateSuccess(){
  //TODO Oliver Update when pins change
  digitalWrite(redLedPin, LOW);
  delay(50);
  digitalWrite(greenLedPin, HIGH);
  delay(50);
}

void lockWindow(){
  digitalWrite(lockPin, HIGH);
  delay(50);
}

void unlockWindow(){
  digitalWrite(lockPin,LOW);
  delay(50);
}

